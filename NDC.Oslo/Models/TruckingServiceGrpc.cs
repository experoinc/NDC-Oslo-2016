// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TruckingService.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Expero {
  public static class Trucking
  {
    static readonly string __ServiceName = "expero.Trucking";

    static readonly Marshaller<global::Expero.Point> __Marshaller_Point = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Expero.Point.Parser.ParseFrom);
    static readonly Marshaller<global::Expero.Response> __Marshaller_Response = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Expero.Response.Parser.ParseFrom);
    static readonly Marshaller<global::Expero.Msg> __Marshaller_Msg = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Expero.Msg.Parser.ParseFrom);

    static readonly Method<global::Expero.Point, global::Expero.Response> __Method_RecordLocation = new Method<global::Expero.Point, global::Expero.Response>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "RecordLocation",
        __Marshaller_Point,
        __Marshaller_Response);

    static readonly Method<global::Expero.Msg, global::Expero.Msg> __Method_Hello = new Method<global::Expero.Msg, global::Expero.Msg>(
        MethodType.Unary,
        __ServiceName,
        "Hello",
        __Marshaller_Msg,
        __Marshaller_Msg);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Expero.TruckingServiceReflection.Descriptor.Services[0]; }
    }

    // client interface
    public interface ITruckingClient
    {
      AsyncDuplexStreamingCall<global::Expero.Point, global::Expero.Response> RecordLocation(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncDuplexStreamingCall<global::Expero.Point, global::Expero.Response> RecordLocation(CallOptions options);
      global::Expero.Msg Hello(global::Expero.Msg request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Expero.Msg Hello(global::Expero.Msg request, CallOptions options);
      AsyncUnaryCall<global::Expero.Msg> HelloAsync(global::Expero.Msg request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Expero.Msg> HelloAsync(global::Expero.Msg request, CallOptions options);
    }

    // server-side interface
    public interface ITrucking
    {
      Task RecordLocation(IAsyncStreamReader<global::Expero.Point> requestStream, IServerStreamWriter<global::Expero.Response> responseStream, ServerCallContext context);
      Task<global::Expero.Msg> Hello(global::Expero.Msg request, ServerCallContext context);
    }

    // client stub
    public class TruckingClient : ClientBase, ITruckingClient
    {
      public TruckingClient(Channel channel) : base(channel)
      {
      }
      public AsyncDuplexStreamingCall<global::Expero.Point, global::Expero.Response> RecordLocation(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RecordLocation, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncDuplexStreamingCall(call);
      }
      public AsyncDuplexStreamingCall<global::Expero.Point, global::Expero.Response> RecordLocation(CallOptions options)
      {
        var call = CreateCall(__Method_RecordLocation, options);
        return Calls.AsyncDuplexStreamingCall(call);
      }
      public global::Expero.Msg Hello(global::Expero.Msg request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Hello, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Expero.Msg Hello(global::Expero.Msg request, CallOptions options)
      {
        var call = CreateCall(__Method_Hello, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Expero.Msg> HelloAsync(global::Expero.Msg request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Hello, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Expero.Msg> HelloAsync(global::Expero.Msg request, CallOptions options)
      {
        var call = CreateCall(__Method_Hello, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(ITrucking serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_RecordLocation, serviceImpl.RecordLocation)
          .AddMethod(__Method_Hello, serviceImpl.Hello).Build();
    }

    // creates a new client
    public static TruckingClient NewClient(Channel channel)
    {
      return new TruckingClient(channel);
    }

  }
}
#endregion
