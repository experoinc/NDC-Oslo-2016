// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TruckingService.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Expero {

  /// <summary>Holder for reflection information generated from TruckingService.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class TruckingServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for TruckingService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TruckingServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVUcnVja2luZ1NlcnZpY2UucHJvdG8SBmV4cGVybyJICgVQb2ludBIaCgR0",
            "cmlwGAEgASgLMgwuZXhwZXJvLlRyaXASEAoIbGF0aXR1ZGUYAiABKAISEQoJ",
            "bG9uZ2l0dWRlGAMgASgCIkcKBFRyaXASEgoKdHJ1Y2tfbmFtZRgBIAEoCRIa",
            "ChJ0cnVja19tYW51ZmFjdHVyZXIYAiABKAkSDwoHdHJpcF9pZBgDIAEoCSIh",
            "CghSZXNwb25zZRIVCg1yZXNwb25zZV90aW1lGAEgASgFMnIKCFRydWNraW5n",
            "EjUKDlJlY29yZExvY2F0aW9uEg0uZXhwZXJvLlBvaW50GhAuZXhwZXJvLlJl",
            "c3BvbnNlKAEwARIvChBSZWFkTGFzdExvY2F0aW9uEgwuZXhwZXJvLlRyaXAa",
            "DS5leHBlcm8uUG9pbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Expero.Point), global::Expero.Point.Parser, new[]{ "Trip", "Latitude", "Longitude" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Expero.Trip), global::Expero.Trip.Parser, new[]{ "TruckName", "TruckManufacturer", "TripId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Expero.Response), global::Expero.Response.Parser, new[]{ "ResponseTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Expero.TruckingServiceReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Point(Point other) : this() {
      Trip = other.trip_ != null ? other.Trip.Clone() : null;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
    }

    public Point Clone() {
      return new Point(this);
    }

    /// <summary>Field number for the "trip" field.</summary>
    public const int TripFieldNumber = 1;
    private global::Expero.Trip trip_;
    public global::Expero.Trip Trip {
      get { return trip_; }
      set {
        trip_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 2;
    private float latitude_;
    public float Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 3;
    private float longitude_;
    public float Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Trip, other.Trip)) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (trip_ != null) hash ^= Trip.GetHashCode();
      if (Latitude != 0F) hash ^= Latitude.GetHashCode();
      if (Longitude != 0F) hash ^= Longitude.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (trip_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Trip);
      }
      if (Latitude != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Latitude);
      }
      if (Longitude != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Longitude);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (trip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trip);
      }
      if (Latitude != 0F) {
        size += 1 + 4;
      }
      if (Longitude != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.trip_ != null) {
        if (trip_ == null) {
          trip_ = new global::Expero.Trip();
        }
        Trip.MergeFrom(other.Trip);
      }
      if (other.Latitude != 0F) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0F) {
        Longitude = other.Longitude;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (trip_ == null) {
              trip_ = new global::Expero.Trip();
            }
            input.ReadMessage(trip_);
            break;
          }
          case 21: {
            Latitude = input.ReadFloat();
            break;
          }
          case 29: {
            Longitude = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Trip : pb::IMessage<Trip> {
    private static readonly pb::MessageParser<Trip> _parser = new pb::MessageParser<Trip>(() => new Trip());
    public static pb::MessageParser<Trip> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Expero.TruckingServiceReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Trip() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Trip(Trip other) : this() {
      truckName_ = other.truckName_;
      truckManufacturer_ = other.truckManufacturer_;
      tripId_ = other.tripId_;
    }

    public Trip Clone() {
      return new Trip(this);
    }

    /// <summary>Field number for the "truck_name" field.</summary>
    public const int TruckNameFieldNumber = 1;
    private string truckName_ = "";
    public string TruckName {
      get { return truckName_; }
      set {
        truckName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "truck_manufacturer" field.</summary>
    public const int TruckManufacturerFieldNumber = 2;
    private string truckManufacturer_ = "";
    public string TruckManufacturer {
      get { return truckManufacturer_; }
      set {
        truckManufacturer_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trip_id" field.</summary>
    public const int TripIdFieldNumber = 3;
    private string tripId_ = "";
    public string TripId {
      get { return tripId_; }
      set {
        tripId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Trip);
    }

    public bool Equals(Trip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TruckName != other.TruckName) return false;
      if (TruckManufacturer != other.TruckManufacturer) return false;
      if (TripId != other.TripId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (TruckName.Length != 0) hash ^= TruckName.GetHashCode();
      if (TruckManufacturer.Length != 0) hash ^= TruckManufacturer.GetHashCode();
      if (TripId.Length != 0) hash ^= TripId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TruckName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TruckName);
      }
      if (TruckManufacturer.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TruckManufacturer);
      }
      if (TripId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TripId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TruckName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TruckName);
      }
      if (TruckManufacturer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TruckManufacturer);
      }
      if (TripId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TripId);
      }
      return size;
    }

    public void MergeFrom(Trip other) {
      if (other == null) {
        return;
      }
      if (other.TruckName.Length != 0) {
        TruckName = other.TruckName;
      }
      if (other.TruckManufacturer.Length != 0) {
        TruckManufacturer = other.TruckManufacturer;
      }
      if (other.TripId.Length != 0) {
        TripId = other.TripId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TruckName = input.ReadString();
            break;
          }
          case 18: {
            TruckManufacturer = input.ReadString();
            break;
          }
          case 26: {
            TripId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Expero.TruckingServiceReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Response(Response other) : this() {
      responseTime_ = other.responseTime_;
    }

    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "response_time" field.</summary>
    public const int ResponseTimeFieldNumber = 1;
    private int responseTime_;
    public int ResponseTime {
      get { return responseTime_; }
      set {
        responseTime_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResponseTime != other.ResponseTime) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ResponseTime != 0) hash ^= ResponseTime.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ResponseTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ResponseTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ResponseTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResponseTime);
      }
      return size;
    }

    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.ResponseTime != 0) {
        ResponseTime = other.ResponseTime;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ResponseTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
